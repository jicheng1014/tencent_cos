c
headers
c
q
headers.keys.include?("Content-Type")
headers
        headers = request.instance_variable_get("@processed_headers")
headers
c
q
request.instance_variable_get("@processed_headers")
request.methods.grep /instance/
request.methods.grep /instance
request.methods
request
c
e
c
q
c
@payload.headers
@payload = r.instance_variable_get("@payload") 
r.instance_variable_get("@payload") 
r.methods.grep /instance/
r.methods
r
@payload.headers
r.payload_headers
r.stringify_headers(r.default_headers).merge(r.stringify_headers(dict[:headers]))
r.stringify_headers(default_headers).merge(r.stringify_headers(dict[:headers]))
stringify_headers(default_headers).merge(r.stringify_headers(dict[:headers]))
r.stringify_headers dict[:headers]
dict[:headers]
r.make_headers dict[:headers]
r.make_headers
r
r =RestClient::Request.new dict
dict = { method: method, url: URI.encode(url), headers: headers, payload: params, timeout: config.timeout}.merge(options[:request_config] || {})
dict = _
 { method: method, url: URI.encode(url), headers: headers, payload: params, timeout: config.timeout}.merge(options[:request_config] || {})
 { method: method, url: URI.encode(url), headers: headers, payload: params, timeout: config.timeout}.merge(options[:request_config] || {}))
 { method: method, url: URI.encode(url), headers: headers, payload: params, timeout: config.timeout}
r
header = { method: method, url: URI.encode(url), headers: headers, payload: params, timeout: config.timeout}
{ method: method, url: URI.encode(url), headers: headers, payload: params, timeout: config.timeout}
          timeout: config.timeout
          payload: params,
          headers: headers,
          url: URI.encode(url),
{ method: method,}
c
r.sendc
r =RestClient::Request.new(method: :a, url: "http://www.baidu.com")
RestClient::Request.new(method: :a, url: "http://www.baidu.com")
RestClient::Request.new(method: :a, url: :a)
RestClient::Request.new(method: :a)
RestClient::Request.new(method: a)
RestClient::Request.new({})
RestClient::Request.new(n{})
RestClient::Request.new(nil)
RestClient::Request.new
RestClient::Request
RestClient
stringify_headers
q
n
s
n
s
n
headers
n
headers
n
headers
@headers
n
@headers
headers
n
headers
n
headers
n
s
n
s
c
processed_headers
n
@payload
n
@headers
headers
n
value
n
s
headers
n
s
args[:url]
@headers
n
s
n
s
c
e.response.body
e
c
e
c
e
c
headers
c
e.response.body
e.body.response
e
n
s
n
headers
n
url
n
s
n
path
n
custom_metas
n
key
n
c
e
c
q
e
c
e.response.body
e.body
e
c
headers
n
url
n
key
n
key
c
e
c
e.response.body
e
c
e
c
headers = { 'x-cos-metadata-directive' => 'Replaced', 'x-cos-copy-source' => path }.merge(custom_metas)
path
n
url
n
c
url
n
c
e.response.body
e
c
q
e.response.body
c
url
headers
url
n
key
n
c
e.response.body
e.response
e
c
headers
n
q
custom_metas
n
q
e.request
puts e.response.body
e.response.body
e.response
e.body
q
bundle exec rspec spec/client_spec.rb:85
data.headers
data.body
data.class
data
c
